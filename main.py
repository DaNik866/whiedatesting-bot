import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# === –ë–õ–û–ö–ò: –í–í–û–î–ù–´–ï + –í–û–ü–†–û–°–´ ===
blocks = [
    {
        "intro": {
            "text": (
                "üìò <b>–ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤—ã –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏</b>\n\n"
                "–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ ‚Äî —ç—Ç–æ –Ω–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö —Å –Ω–∏–º–∏.\n\n"
                "üîπ <b>–°–ª–æ–∂–µ–Ω–∏–µ</b>: 2 + 3 = 5\n"
                "üîπ <b>–£–º–Ω–æ–∂–µ–Ω–∏–µ</b>: 4 √ó 5 = 20\n"
                "üîπ <b>–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π</b>: —Å–Ω–∞—á–∞–ª–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º ‚Äî —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ."
            ),
            "image_url": "https://i.imgur.com/8Kb9B9L.png"
        },
        "questions": [
            {
                "question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 5 √ó 6?",
                "options": ["30", "35", "40"],
                "correct": 0
            },
            {
                "question": "–ß–µ–º—É —Ä–∞–≤–Ω–æ 12 + 8 √∑ 4?",
                "options": ["5", "10", "14"],
                "correct": 2
            }
        ]
    },
    {
        "intro": {
            "text": (
                "üìò <b>–ë–ª–æ–∫ 2: –°—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏</b>\n\n"
                "–ö–ª–µ—Ç–∫–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∂–∏–∑–Ω–∏.\n\n"
                "üîπ <b>–Ø–¥—Ä–æ</b> ‚Äî —Ö—Ä–∞–Ω–∏—Ç –î–ù–ö\n"
                "üîπ <b>–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏</b> ‚Äî ¬´—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è¬ª –∫–ª–µ—Ç–∫–∏\n"
                "üîπ <b>–¶–∏—Ç–æ–ø–ª–∞—Å–º–∞</b> ‚Äî –∂–∏–¥–∫–æ—Å—Ç—å, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–µ–∞–∫—Ü–∏–∏"
            ),
            "image_url": "https://i.imgur.com/JpL6FKc.png"
        },
        "questions": [
            {
                "question": "–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω–æ–∏–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç–Ω–µ—Ä–≥–∏—é?",
                "options": ["–Ø–¥—Ä–æ", "–ú–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏", "–õ–∏–∑–æ—Å–æ–º–∞"],
                "correct": 1
            },
            {
                "question": "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –î–ù–ö?",
                "options": ["–í –º–µ–º–±—Ä–∞–Ω–µ", "–í —è–¥—Ä–µ", "–í –≤–∞–∫—É–æ–ª–∏"],
                "correct": 1
            }
        ]
    }
]
# ====================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# ============ –ú–ï–ù–Æ –ö–û–ú–ê–ù–î –í TELEGRAM ============
async def set_commands(bot: Bot):
    commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
        types.BotCommand(command="/menu", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands)
# ================================================

# ============ –ö–õ–ê–í–ò–ê–¢–£–†–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ============
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìò –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")],
            [types.KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"), types.KeyboardButton(text="üõ† –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard
# ================================================

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ============
@dp.message(F.text == "üìò –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_learning(message: types.Message):
    user_data[message.chat.id] = {"current_block": 0}
    await send_block_intro(message.chat.id)

@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    text = (
        "üìò <b>Whieda Testing Bot</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–µ–º–∞–º:\n"
        "üîπ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n"
        "üîπ –ë–∏–æ–ª–æ–≥–∏—è\n"
        "üîπ –ò—Å—Ç–æ—Ä–∏—è –∏ –¥—Ä.\n\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è."
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu())

@dp.message(F.text == "üõ† –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    text = (
        "üõ† <b>–ü–æ–º–æ—â—å</b>\n\n"
        "üîπ –ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫–∏\n"
        "üîπ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî —Ç–µ—Å—Ç\n"
        "üîπ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Ç—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "üîπ –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
        "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ /start"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu())
# ================================================

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ============
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await show_menu(message)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await show_menu(message)
# ================================================

# ============ –ü–û–ö–ê–ó –ú–ï–ù–Æ ============
async def show_menu(message: types.Message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Whieda Testing Bot!</b>\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=get_main_menu())
# ================================================

# ============ –ü–û–ö–ê–ó –í–í–û–î–ù–û–ì–û –ë–õ–û–ö–ê ============
async def send_block_intro(chat_id):
    data = user_data[chat_id]
    block = blocks[data["current_block"]]
    intro = block["intro"]

    try:
        await bot.send_photo(
            chat_id=chat_id,
            photo=intro["image_url"],
            caption=intro["text"],
            parse_mode="HTML"
        )
    except Exception as e:
        await bot.send_message(
            chat_id=chat_id,
            text=intro["text"] + "\n\nüì∑ (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
            parse_mode="HTML"
        )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await bot.send_message(chat_id, "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=kb)
# ================================================

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö (–∏–Ω–ª–∞–π–Ω) ============
@dp.callback_query(F.data == "main_menu")
async def go_to_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await show_menu(callback.message)

@dp.callback_query(F.data == "start_quiz")
async def start_quiz(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_data[chat_id]["current_question"] = 0
    await callback.message.edit_reply_markup(reply_markup=None)
    await ask_question(chat_id)
# ================================================

# ============ –û–¢–ü–†–ê–í–ö–ê –í–û–ü–†–û–°–û–í ============
async def ask_question(chat_id):
    data = user_data[chat_id]
    block = blocks[data["current_block"]]
    questions = block["questions"]

    if data["current_question"] >= len(questions):
        await bot.send_message(chat_id, "‚úÖ –ë–ª–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!")
        data["current_block"] += 1
        if data["current_block"] >= len(blocks):
            await bot.send_message(
                chat_id,
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –±–ª–æ–∫–∏!\n\n–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?",
                reply_markup=get_main_menu()
            )
        else:
            await asyncio.sleep(1.5)
            await send_block_intro(chat_id)
        return

    q = questions[data["current_question"]]
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for idx, opt in enumerate(q["options"]):
        kb.inline_keyboard.append([InlineKeyboardButton(text=opt, callback_data=f"ans_{idx}")])

    await bot.send_message(chat_id, f"üîπ –í–æ–ø—Ä–æ—Å:\n\n{q['question']}", reply_markup=kb)
# ================================================

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í ============
@dp.callback_query(F.data.startswith("ans_"))
async def handle_answer(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_choice = int(callback.data.split("_")[1])
    data = user_data[chat_id]
    block = blocks[data["current_block"]]
    q = block["questions"][data["current_question"]]

    if user_choice == q["correct"]:
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        correct = q["options"][q["correct"]]
        result = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <b>{correct}</b>"

    await callback.message.edit_text(
        callback.message.text + f"\n\n{result}",
        parse_mode="HTML"
    )

    await asyncio.sleep(1.5)
    data["current_question"] += 1
    await ask_question(chat_id)
# ================================================

# ============ –ó–ê–ü–£–°–ö ============
async def main():
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
